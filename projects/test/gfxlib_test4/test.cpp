///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Test Application
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <xbase.hpp>
#include <systemlib/memory.hpp>
#include <systemlib/time.hpp>
#include <gfxlib/gfx.hpp>
#include <gfxlib/palette.hpp>
#include <cstdlib>
#include <cstdio>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  GraphicsTestApp
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class PaletteTestApp : public Application
{
  private:
    enum {
      TEST_SIZE = 640*480,
    };
    Colour32* testData;

  public:
    // Runnable
    sint32  run();


  public:
    PaletteTestApp();
    ~PaletteTestApp();
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Application* Application::createInstance()
{
  Graphics::init();
  return new PaletteTestApp();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Application::destroyInstance(Application* app)
{
  delete app;
  Graphics::done();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PaletteTestApp::PaletteTestApp()
{
  int i       = TEST_SIZE;
  testData    = Mem::alloc<Colour32>(i);
  Colour32* p = testData;
  std::printf("Creating %d arbitrary colours...", i);
  std::fflush(stdout);
  while (i--) {
    p->red()    = std::rand()&0xFF;
    p->green()  = std::rand()&0xFF;
    p->blue()   = std::rand()&0xFF;
    p++;
  }
  std::printf("done\n");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PaletteTestApp::~PaletteTestApp()
{
  Mem::free(testData);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Runnable interface implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

sint32 PaletteTestApp::run()
{
  Time::MilliClock timer;
  const Palette* palette = Palette::getPresetPalette(Palette::PAL_FAKERGB_666);
  if (palette) {
    std::printf("Testing Palette::PAL_FAKERGB_666...");
    std::fflush(stdout);
    Colour32* c = testData;
    int       i = TEST_SIZE;
    timer.set();
    while (i--) {
      palette->findBestMatch(*c++, false);
    }
    float64 elapsed = timer.elapsedFrac();
    std::printf("%.3f ms\n", elapsed);
  }
  return 0;
}


